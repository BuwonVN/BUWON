@page "/users/changepass"

@using BWERP.Models.User;
@using BWERP.Repositories.Interfaces
@using BWERP.Pages.Components
@using Microsoft.AspNetCore.Identity;

@inject NavigationManager NavigationManager;
@inject IToastService toastService
@inject IJSRuntime JSRuntime

@if (_user == null)
{
	<LoadingIndicator></LoadingIndicator>
}
else
{
	<div class="app-content pt-3 p-md-3 p-lg-4">
		<div class="container-xl">
			<h1 class="app-page-title">Change Password</h1>
			<hr class="mb-4">
			<div class="row g-4 settings-section">
				<div class="app-card app-card-settings shadow-sm p-4">
					<div class="app-card-body">
						<EditForm Model="_user" OnValidSubmit="SubmitTask">
							<DataAnnotationsValidator />
							<div class="mb-3">
								<label for="Name" class="form-label">Old Password</label>
								<InputText type="password" class="form-control" @bind-Value="_user.OldPassword"></InputText>
								<ValidationMessage For="()=>_user.OldPassword"></ValidationMessage>
							</div>

							<div class="mb-3">
								<label for="Name" class="form-label">New Password</label>
								<InputText type="password" class="form-control" @bind-Value="_user.NewPassword"></InputText>
								<ValidationMessage For="()=>_user.NewPassword"></ValidationMessage>
							</div>
							<div class="mb-3">
								<label for="Name" class="form-label">Confirm Password</label>
								<InputText type="password" class="form-control" @bind-Value="_user.ConfirmPassword"></InputText>
								<ValidationMessage For="()=>_user.ConfirmPassword"></ValidationMessage>
							</div>
							<button type="submit" class="btn app-btn-primary">Save Changes</button>
							<a class="btn app-btn-secondary" href="/">Cancel</a>
						</EditForm>
					</div><!--//app-card-body-->
				</div><!--//app-card-->
			</div><!--//row-->
		</div><!--//container-fluid-->
	</div>
	<!--//app-content-->
}

@code {
	private UserChangePassword _user = new UserChangePassword();
	[Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
	[Inject] IUserApiClient userApiClient { get; set; }

	protected async override Task OnInitializedAsync()
	{

	}

	private async Task SubmitTask(EditContext context)
	{
		//AUTHORIZE
		var authState = await AuthenticationStateProvider
			.GetAuthenticationStateAsync();
		//GET USERID
		var userid = authState.User.FindFirst(c => c.Type.Contains("UserId"))?.Value;
		//GET USER INFO
		var userDtos = await userApiClient.GetUserById(userid);

		if (_user.NewPassword != _user.ConfirmPassword)
		{
			toastService.ShowError($"Password is not match.");
			return;
		}
		var result = await userApiClient.ChangePassword(Guid.Parse(userid), _user);
		if (result)
		{
			toastService.ShowSuccess($"Password has been changed successfully.");			
			//Clear textbox
			_user.OldPassword = string.Empty;
			_user.NewPassword = string.Empty;
			_user.ConfirmPassword = string.Empty;

			// Sign out the user and navigate to the login page
			await AuthenticationStateProvider.GetAuthenticationStateAsync();
			await SignOutUser();
			await JSRuntime.InvokeVoidAsync("redirectToLoginWithDelay");
		}
		else
		{
			toastService.ShowError($"An error occurred in progress. Please contact to administrator.");
		}
	}

	private async Task SignOutUser()
	{
		await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
		await JSRuntime.InvokeVoidAsync("localStorage.clear");
	}
}
